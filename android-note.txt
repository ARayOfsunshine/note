控件属性
id：控件的标识，可与代码相关。

在代码中使用控件
1，声明控件
2，findViewById();返回值为view。所有控件的父类都是view。

Button：控件的事件
（1）：以内部内的方式给Button控件添加事件：
关联button控件pravite Button btn;btn=(Button)findViewById(R.id.控件上的id属性值)；
给button控件添加事件btn.setOnClickListener(实现View.onClickListener的类对象);
（2）：以匿名类的方法直接实现类的方法。
关联button控件pravite Button btn;btn=(Button)findViewById(R.id.控件上的id属性值)；
给button控件添加事件btn.setOnClickListener(View.OnClickListener(){ public void onClick(View v){事件处理程序}});
（3）：以xml的方式设置事件
给Button控件直接添加android:onClick="事件名"。
在代码中以public void 事件名(参数需要跟事件事件的原型类相同 View v){}

EditText:输入框
（1）：比较重要的几个属性：text文本内容，inputType文本类型，hint给输入框提示。

imageView:图像控件（文件名指的都是没有后缀的）
（1）：比较重要的几个属性：src=“@dramable/文件名”,setImageResouce(R.dramable.文件名);

imageButton：图像按键
（1）：imageButton是imageView的子类，点击图片是可以响应事件的。

radioGroup与radioButton：单选框组与单选框
（1）：radioGroup控件下radioButton发生改变可以使用setOnCheckedChangeListener来监听事件。实现的接口类对象为RadioGroup.OnCheckedChangeListener，
方法为onCheckedChanged(RadioGroup group,Int checkedId);  参数checkedId是选中RadioButton的ID，可以使用R.id.组件id来判断选中单选项，或通过获取到的RadioButton的关联对象来使用isChecked()来判断控件的选中状态来判断选中哪一个。
（2）：radioButton当中选中设置属性为setChecked(true);

CheckBox：复选框按钮	
isChecked():确定复选框是否被选中；
setChecked():强制选中或取消选中。
监听器：实现CompoundButton.OnCheckedChangeListener接口。并实现回调方法onCheckedChange()方法。


资源的使用：资源的使用是为了国际化或本地化的使用。资源的文件一定要是小写。
在res文件夹下有个values文件，存放的是资源xml文件预设好的参数值，能够根据系统设置自动改变预设好的代码预设。values默认为安卓系统语言为英语的资源使用，而values-zh为中文的。
资源使用可以在布局文件当中使用：@资源名称/资源的name
在代码中使用：Resouces res=new 	Resouces();String str=res.getString(R.string.test);

触屏事件：
（1）：对屏幕的触屏事件重写Activity类的onTouchEvent(MotionEvent event)方法。通过参数event.getAction()方法能区分用户的操作，用于与MotionEvent类的属性比较。event.getAction().getX()用于获取在当前屏幕的x的位置，event.getAction().getY()用于获取在当前屏幕Y的位置。
（2）：MotionEvent.ACTION_DOWN手势按下，MotionEvent.ACTION_MOVE手势移动，MotionEvent.ACTION_UP手势抬起。
（3）：在控件上注册监听事件，使用的是监听事件setOnTouchListener()。实现的类为View.OnTouchListener。重写方法为public booleab onTouch(View view,MotionEvent event){};	


layout：布局
（1）：LinearLayout线性布局：比较重要的属性orientation排列方向(分别为水平与垂直)，gravity重心（控件的对齐方式）android:layout_weight权重设置在线性布局的控件上指的是占布局的比重。对于布局下有很多控件下可以通过布局对象获取子控件的个数getChildCount()方法。 案例：动态更改排列方向。通过checkbox来选择重心排列位置。
（2）：RelativeLayout相对布局：1，相对布局可以以父容器相对对齐的方式属性在控件上alignParentLeft,alignParentTop等，或者以控件间的相对对齐做参考的在对比控件上有layout_above在上方，layout_alginleft在左对齐，layout_below在下方，layout_alginbotton等。（对其的比较为id值）；
（3）：tableLayout：表单布局，控制直接放在tablelayout会占满一行，要用tablerow才能使用单元格。能给子控件添加layout_span来表示占几个单元格。在子控件上使用layout_column来表示控件在展示在第几个单元格（注意：单元格索引开始值为0）。使用tablelayout属性stretchColumns来指定整个表单的表格扩张沾满。使用tableLayout属性shrinkColumns来指定整个表单的表格收缩。使用tableLayout属性collapsceCloumn来折叠指定的列。
（4）：安卓4.0添加的GridLayout网格布局。常用属性有orientation指定网格控件的排列方式，layout_gravity来指定网格控件的对其方式。属性rowCount来指定网格占有几行，属性colmunCount来指定网格占有几列。
（5）：FrameLayout帧布局。显示的对象将会固定在屏幕的左上角，不能指定位置。当有多个显示对象，后一个将会直接在前一个之上进行覆盖显示，把前一个控件部分或全部挡住。
（6）：drawerLayout抽屉布局。侧边拖动出现菜单项。
（7）：scrollView设置垂直滚动条。滚动条控件下，只允许设置一个子容器。同理水平控制条为horizontalScrollView。


消息处理机制：
主线程处理事件超过5秒，app会提示程序无响应，所以主线线程处理的事件不能超过5秒。

XML解析：
（1）：在安卓项目当中使用xml文件放在xml文件夹中。对于xml的解析工作是使用xmlPullParser来执行的（安卓项目是使用pull解析，pull解析本质就是SAX解析）。获取xml文件然后通过xmlPullParser来处理。代码案例：xmlPullParser parser =getResouces().getXml(R.xml.xml文件名)。同过parser对象来获知xml解析的情况。parser.getEventType();通过与xmlPullParser.START_DOCUMENTD等来判断解析到的情况。一般解析文件操作比较耗时，应该开启一个线程来执行。

json解析：
java中的json对象JsonObject json=new JsonObject();json.getString("键名");

消息提示：
Toast给用户一个短暂的提示，用户不需要进行响应。使用：使用Toast类上的静态方法，Toast.makeText(context,text,duration)；context上下文，text:提示的信息，duration提示的时长。
如果需要定义自己自定义提示内容可以使用构造的方法创建Toast。使用:Toast t=new Toast(context);t.setView(控件);t.setDuration(设置时长)注意设置完后必须调用t.show()方法。
获取自定义的view使用方法：View v=LayoutInflater.from(this).inflate(R.layou.viewId,null);
AlterDiaog对话消息提示：用户必须点击确定对话框才会消失。使用：AlterDialog ad=new AlterDialog.Builder(context).setTtile().setMessage().setPositiveButton(按钮文字,事件监听).create();ad.show();对话框按钮事件使用new DialogInterface.onClickListener(){ 实现public void onClick(){}}。

列表对话框：单项的列表对话框：使用对话框类AlterDialog创建：使用:new AlterDialog.Builder(context).setItem(数组，用来创建的列表项).show();
            具有单选按钮的列表对话框：使用的是setSingleChoiceItems(数组，默认选中项，事件监听)。注意：点击对话框想要保存之前的选项，应该将创建的类使用AlterDialog 变量保存。
            具有多项选择按钮的列表对话框:使用的方法是setMulitChoiceItems(数组，布尔值，事件监听);

进度条对话框：展示工作的进行到的情况反馈。默认的展示是加载圈。水平的展示进度条使用：ProgressDialog dlg =new progressDialog(context);dlg.setTitle(),set...等。dlg.setProgressStyle(设置进度条的样式。ProgressDialog.常量)；dlg.show();设置进度条的数值dlg.setProgress(整数);关闭进度条对话框dlg.dismiss();

自定义对话框：方法1：使用AlterDialog.Builder().setView()设置视图的方法。方法2：使用Dialog类的实例，使用方法setContentView(View view)设置自定义视图。
              方法1：解析自定义资源当中的布局文件。layoutInterface i=getLayoutInflater();View custom =i.inflater(R.layout.视图文件名)。
              方法2：Dialog dl=new Dialog(context);dl.setContentView(视图)；关闭对话框 dl.dismiss();


适配器：
负责为部件提供数据源，让数据能够显示在控件上，就是适配器的工作。adapater ListView控件显示adapter。ArrayAdapter(context,布局文件，控件id,data)。
SimpleAdapter adapter=new SimpleAdapter(context,data,项布局，显示数据源的key,显示数据的id);
BaseAdapter类是一个接口，需要实现内置好的方法，对应的设置好适配的数据源。最后通过ListView.setAdapter(对BaseAdapter接口实现类的实例对象);
当有数据的添加或删除是，使用方法通知适配器更改数据，就会自动反应给布局视图。adapter.notifyDatasetChanged();

spinner：下拉列表样式的控件：设置控件的数据可以使用适配器或者spinner上的属性entries。可是使用数据资源的方式设置。在res/values下创建数据是数组的资源。（案例选择班，不同学生）。

使用适配器的控件布局有ListView,GridView,spinner（下拉菜单效果）;

Activity的配置与通信：
要启动另一个activity的页面要使用Intent intent=new Intent();intent.setClass(context,要启动类的文件名xxx.class);最后使用方法启动startActivity(intent);
关于intent.setAction()可以使用逻辑动作名启动页面。但同名manifest配置多个同名逻辑动作名时，会出现让用户选择的效果访问页面。	

Activity的四种启动模式：
（1）：程序打开时就创建了一个任务栈, 用于存储当前程序的activity,所有的activity属于一个任务栈。 一个任务栈包含了一个activity的集合, 去有序的选择哪一个activity和用户进行交互:只有在任务栈栈顶的activity才可以跟用户进行交互。任务栈可以移动到后台, 并且保留了每一个activity的状态. 并且有序的给用户列出它们的任务, 而且还不丢失它们状态信息。退出应用程序时：当把所有的任务栈中所有的activity清除出栈时,任务栈会被销毁,程序退出。
（2）：standard，默认模式：每次跳转系统都会在task中生成一个新的MainActivity实例，并且放于栈结构的顶部，当我们按下后退键时，才能看到原来的MainActivity实例。 standard启动模式，不管有没有已存在的实例，都生成新的实例。
（3）：singleTop模式：任务栈寻找目标是否在栈顶,不是位于栈顶，于是重新生成一个实例。 这就是singleTop启动模式，如果发现有对应的Activity实例正位于栈顶，则重复利用，不再生成新的实例。这种启动模式通常适用于接受到消息后显示的界面，例如QQ接受到消息后弹出Activity，如果一次来10条消息，总不能一次弹10个Activity。
（4）：singleTask模式：如果Activity实例已经被创建了，但是不在栈顶，将不会在创建Activity实例，而是去寻找对应的Activity实例，则使此Activity实例之上的其他Activity实例统统出栈，使此Activity实例成为栈顶对象，显示到幕前。
（5）：singleInstance模式：它会启用一个新的栈结构，将Activity放置于这个新的栈结构中，并保证不再有其他Activity实例进入。 



Fragment声明周期与交互管理：
（1）：Fragment的使用：创建定义的fragment类并继承Fragment。必须重写OncreateView方法。并解析关联布局，并返回该布局。在要使用的主布局文件中使用Fragment控件的属性name进行调用使用。
（2）：在fragment与调用的fragment控件Activity中的声明周期是一一相对应的。
（3）：在被调用的主布局Activity当中可以设置fragment暴露出来，并加以修改。方法：通过findFragmentById查找对应的Fragment控件（或者方法findFragmentByTag），通过查找到的对象修改暴露出来的属性进行修改fragment。注意(在接受时应该使用FragmentManager 来接受，并通过getFragmentManager来获得FragmentManager对象。)
（3）：动态的设置Fragment：1，获得FragmentManager fm=getFragmentManager();获取FrammentManager对象。2，FragmentTransaction ft=fm.beginTransaction()。3,ft.add(容器ID，Fragment对象，Fragment的tag)。4，ft.commit();
（4）：当设备是横屏时，res文件夹下layout-land就是设置横屏的布局文件。（案例：手机屏幕竖屏时显示单个选项卡，当是横屏时显示选项卡以及内容）
在Fragment与Fragment进行操作，要反馈时，应当在activity当中操作，不应当在Fragment的Activity当中关联。方法：使用一个接口在主activity当中实现，让Fragment的activity当中事件方法传递事件源给接口方法，让主Activity实现。（注意：在Fragment的activity中应该设置一个方法来就收接口对象。）。



自定义控件：
（1）：自定义控件分，整体的重新重写控件，组合控件，继承控件。
（2）：自定义的控件重写方式：都是继承View这个顶部类的。继承实现onDraw方法，并对自定义的类设置两个（至少两个）构造器的方法。在被动态使用或在xml布局文件使用的时候回自动被调用。

service服务：
启动后台服务，后台服务应用场景如：音乐后台播放，读取文件等，可以使用service启动后台服务。
（1）：使用service必须继承Service类，并实现方法。当要在activity使用时在manifest当中设置，service标签，并指明name，值是哪个继承了service的类名文件。service的启动有start方法，也有bing启动方法。
（1）：start启动使用放startService（new Intent("manifest设置server标识")）。停止stopService方法。当每次使用用start方法启动service都会调研onstartcommand方法。
（2）：bing启动使用bindService，停止unbindServie方法。bind启动会调用onbind方法生命周期方法，bind多次启动都只会一次onbind方法。
（3）：无论是start方法还是bing方法当停止service时都是调用onDestory方法。
（4）：一旦某个组件start一个service后，service开始独立运行，不再与原来的组件产生任何关系。某个组件bind一个service后，service为组件提供一个接口，近似于客户端会进行互动的交互。

系统服务：
（1）：系统服务调用系统设备的服务，如：音量，屏幕亮度，网络，等。
（2）：使用Manager管理，通过调用方法getSystemService（系统服务类型）;通过拿到系统服务对象，通过不同的方法设置设备服务属性。
（3）：系统通知Notification。NotificationManager m;m.notify(id,notification);

broadcast（广播）：
（1）：静态使用广播要继承BoradcastRecevicer类，监听onRecevice方法监听广播发出的事件监听。广播注册在manifest当中，recevier标签祖册。发送广播方法sendBroadcast(Intent);
（2）：动态注册广播，使用放registerRecevicer(recevicer,filter)。recevicer是继承Broadcast的实例对象，filter是IntentFilter的实例对象。取消广播放unRegigterRecevicer();

sharedPreference存储：
（1）：sharedPreference是一种轻量级的数据存取方法。以键值对的方式来存储应用程序的配置信息。
（2）：只能存储基本的数据类型：boolean,float,int,long,string。
（3）：以xml文件的格式存储，位于/data/data/包名/shared_prefs目录下。
（4）：使用方法：使用Sharedpreference sp=getSharedpreferences(文件名，mode)，写入时使用实例对象的Editro ed=sp.edit()方法，通过de.putString('键名','键值')写入,真正写入de.commit()。 读取使用：sp.getString(键值,默认值)

存储在文件上方法：
（1）：使用提供的openFileoutput(文件名，mode)；获得FileoutputStream fos=openFileouput();文件io处理；
（2）：在android 中提供获取fileoutputStream以及fileinputStream是通过openFileoutput以及openFileinput提供的。需要高效的读写可使用bufferedWrite以及buffedReader等。
（3）：文件存储在res/raw原文件下。读：InputStream is=getResources().openRawResource(R.resouce.文件名) 解析到res/raw文件。然后通过io流读写。
（4）：sd卡读写等，需要注意的是需要在manifest当中添加对应的权限。

SQLiteDatabase:
（1）：使用SQLiteDatabase要继承一个类，SQLiteOpenHelper并实现对应的方法（注意要实现构造器）。在Activity当中使用，使用直接创建继承类的实例并传参，使用实例对象方法getReadableDataBase()以及getWriteableDataBase()方法返回数据库对象。数据库对象使用execSQL(sql);


contentProvider:内容提供程序
（1）：contentProvider为应用程序提供应用程序之间的共享访问数据提供url，使用应用程序能够使用其他应用程序的数据提供便利。
（2）：使用方法：通过上下文对象能直接获得contentResolver();contentProvider暴露出四个标准的api提供应用程序使用数据接口，分别为：insert,update,delete,query。
（3）：Cursor类，指的是游标的意思，游标指向列表的项的方式获取数据。
