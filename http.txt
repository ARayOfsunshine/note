http:请求报文或响应报文包括：
起始行:报文的第一行就是起始行，在请求报文中用来说明要做什么，在响应报文中说明出现了什么情况。
首部：起始行后又零个或多个首部字段，每个首部都字段都包含一个名字和一个值，为了方便解析，两者之间用冒号来分隔，首部以一个空行来结束。添加一个首部字段和添加新行一样简单。
主体：起始行和首部都是文本形式且结构化的，而主体就不同了，主体当中可以包含任意的二进制数据，当然主体当中也可以包含文本。

TCP的延迟确认：TCP连接握手需要经过以下几个阶段
（1）请求新的TCP连接时，客户端要向服务器发送一个小的TCP分组（通常是40~60字节），这个分组设置了特殊的SYN标记，说明这是一个连接请求。
（2）如果服务器接收了请求，就会对连接参数进行计算，并想客户端回送送一个TCP分组，这个分组中的SYN和ACK标记都被置位，说明连接请求已经被接收。
（3）最后客户端向服务器回送一条确认信息，通知他连接已经成功建立。现代的TCP栈都允许客户端在这个确认分组中发送数据。

TCP慢启动：TCP数据传输的性能还取决于TCP连接的使用期：TCP连接会随着时间进行自我“调谐”。起初会限制连接的最大连接速度，如果数据成功传输，会随着时间的推移提高传输的速度。这种调谐就被称为TCP的慢启动，用于防止英特网的突然过载和拥塞。

http连接请求处理的优化有：
并行连接可能会提高页面的加载速度，但是不一定会连接得更块。并行连接会同时建立多个TCP连接请求资源，但是多个连接建立的同时也在消耗带宽以及用户的内存消耗，早成性能问题等。
持久化连接，保持对源目标服务器的连接持久，不关闭连接，从而减少TCP连接阶段的时间消耗以及关闭阶段所耗费的时间从而提高连接的速度。
最优方案为并行连接以及持久连接同时使用为最高效的的方式。


验证缓存：
http/1.0+使用expires首部，而http/1.1则使用cache-control:max-age（参数值为秒）来表示缓存资源的过期时间。如果没超过缓存时间，则继续沿用缓存副本，而一旦过期，就需要想服务器发送存在再验证。
缓存过期使用条件方法再验证：
If-Modified-Since<验证参数为date>首部：如果从指定日期文件被修改过了，就执行请求方法，可以与Last-Modified服务器响应首部配合使用。只有内容在被修改后与缓存版本有所不同时才去获取内容。
If-None-Match首部<验证参数为tags>：服务器为文档提供特殊的标签ETag，而不是讲其与最近修改如期相匹配，这个标签就想序列号一样。如果已缓存标签与服务器文档中的标签有所不同，If-Node-Match首部就会去执行请求方法。

SSL/TLS加密通信协议：
（1） 客户端向服务器端索要并验证公钥。
（2） 双方协商生成"对话密钥"。
（3） 双方采用"对话密钥"进行加密通信。
上面过程的前两步，又称为"握手阶段"（handshake）。

握手阶段：
1，客户端（通常是浏览器）先向服务器发出加密通信的请求。客户端主要向服务器提供以下信息。
（1） 支持的协议版本，比如TLS 1.0版。
（2） 一个客户端生成的随机数，稍后用于生成"对话密钥"。
（3） 支持的加密方法，比如RSA公钥加密。
（4） 支持的压缩方法。

2，服务器收到客户端请求后，向客户端发出回应。服务器的回应包含以下内容。
（1） 确认使用的加密通信协议版本，比如TLS 1.0版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。
（2） 一个服务器生成的随机数，稍后用于生成"对话密钥"。
（3） 确认使用的加密方法，比如RSA公钥加密。
（4） 服务器证书。

3，客户端收到服务器回应以后，首先验证服务器证书。如果证书不是可信机构颁布、或者证书中的域名与实际域名不一致、或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。如果证书没有问题，客户端就会从证书中取出服务器的公钥。然后，向服务器发送下面三项信息。
（1） 一个随机数。该随机数用服务器公钥加密，防止被窃听。
（2） 编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。
（3） 客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供服务器校验。

4，服务器收到客户端的第三个随机数pre-master key之后，计算生成本次会话所用的"会话密钥"。然后，向客户端最后发送下面信息。
（1）编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。
（2）服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供客户端校验