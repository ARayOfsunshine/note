React创建项目起步：    
    安装：npx create-react-app projectName;（通过工程化的脚手架创建React项目）
    import react,{component} from 'react';编写react应用必须引入的模块；
    import reactDom from 'react-dom';帮助react编写的应用渲染到浏览器Dom上面；





React的jsx语法：1，jsx是对js语法的扩展，只能在React应用使用，并不能直接运行在JS当中，需要经过babel编译后才能运行；实际编译后是一个React对象（虚拟DOM）；
                2，书写方法：可以在JS当中编写HTML的元素（虚拟的DOM元素）；要在HTML标签里面写JS代码要通过{}（到括号包裹起来）。
                3，jsx的书写方法实际上会被babel转译成一个名为React.createElement(元素名,以对象的形式里面放元素的属性，子节点或文本)函数的调用；用React.createElement函数创建元素时如果还需要其他子元素，则在第三                     个参数里面继续嵌套React.createElement函数，

React中创建组件可以有两种方法：1，一种以函数的方式创建组件，一种以class的方式创建；函数创建的方式：componentName()=>{return JSX语法创建的组件结构}   ；
                                  class创建的组件方式：class componentNmae extends React.Component{render(){return JSX的语法；}}
                               2，React中创建的元素时虚拟DOM，是一个React对象；拥有的属性以及方法比原生的创建的标签的属性方法要少，原生创建的标签，继承许多原型对象。所以这是React高效的原因之一；
                                  注意：创建组件时，必须需要一个根容器包裹起来；而且只能有一个；

React中的props与state; 1，React中的props中是为父组件想子组件传递数据使用的；在函数定义的组件中以函数参数方式传入；以class定义的组件中以在构造器constructor中传入;
                       2，想要为组件使用动态的数据，数据必须存储在state当中，想要改变数据状态时则使用setState的方法改变；注意想要在当前组件使用状态管理数据必须要使用class的方式创建组件；这是因为state状态的属                            性是继承React.Component来的；

React的生命周期：只有有状态的的组件才会有生命周期；class xxx extends Compontent {}
 重要的声明周期：constructor：获取继承的父类的属性以及方法；
                 compontentWillMount:启动页前的生命周期；页面即将渲染；
                 render:创建React虚拟DOM时的更新;
                 compontentDidMount:状态和创建的DOM都完成了；

React的事件：1，在React中想要阻止默认行为：在函数里面统一使用e.preventDefault();e是React根据 W3C 规范来定义这些合成事件，所以不需要担心跨浏览器的兼容性问题。
             2，在React中使用事件，不需要使用事件监听的方式使用函数；而是仅需要在该元素初始渲染的时候添加一个监听器。
             3，要为在class当中创建的组件添加事件，都需要为事件名前用this调用，函数名如果不是箭头函数都需要在构造器绑定this。
             4，为事件传递参数的方式有两种，一种是bind的方式绑定，HandlerName.bind(this,arguments)。一种是以箭头函数的方式传入，(e)=>this.HandlerName(arguments,e);
 
React的条件渲染：1，React中的件渲染和 JavaScript 中的一样，使用 JavaScript 运算符 if 或者条件运算符去创建元素来表现当前的状态，然后让 React 根据它们来更新 UI。    
                 2，条件渲染的方式有：使用if语句进行判断是否return该组件或元素。要渲染的语句也可以使用变量来存储，在要渲染的的地方return返回该变量。
                 3，条件渲染的方式有：&&运算符，如果条件是 true，&& 右侧的元素就会被渲染，如果是 false，React 会忽略并跳过它。
                 4，条件渲染的方式有：使用 JavaScript 中的三目运算符condition ? true : false。
                 5，阻止组件渲染的方式是通过特定条件判断，直接在该组件返回null。将其放入渲染函数将不会被渲染。

React的列表渲染：1，在React中使用渲染列表的能力是使用map()的遍历方法。注意是要能返回元素的的遍历方法。比如foreach()是没有返回值的能力的，所以不能用作列表循环的能力。
                 2，Key属性：key 帮助 React 识别哪些元素改变了，比如被添加或删除。因此你应当给数组中的每一个元素赋予一个确定的标识。



React的表单：1，react的表单元素工作方式与其他Dom元素有些不同，这是因为表单元素通常会保持一些内部的state。如input,textarea,option等；
             2，像input,textarea,option等这类表单都是通过react受控的。
        

创建组件时附加的属性：1，propType:{titile:React.PropTypes.string.isRequired}:验证传入prop是否符合要求；2，getDefaultProps:function(){return {title:'default value'}}


在创建组件是想要获取真实的DOM元素节点:在元素设置指定ref属性以及对应的值。获取：this.refs.ref对应的值.事件操作。注意只有虚拟DOM插入文档后才能使用此属性。一般用于时间当中。



React-Router4:
安装：npm install react-router-dom;
导入关键模块:import {BroserRouter as Router,Route,Link}from 'react-router-dom';

import {withRouter} from 'react-router-dom';withRouter(组件) 使没被Route渲染的组件拥有路由信息；

Route组件：它最基本的职责就是当页面的访问地址与 Route 上的 path 匹配时，就渲染出对应的 UI 界面。
Route组件的属性：1，render methods分别是：<Route component>，<Route render>，<Route children>同一个<Route> 应该只使用一种 render method ，大部分情况下你将使用 component。
                 2，props分别是：match,location,history。所有的 render method 无一例外都将被传入这些 props。  
                 3，path:属性的通配符：1，:paramName匹配URL的一个部分，直到遇到下一个/、?、#为止。这个路径参数可以通过this.props.params.paramName取出。
                                       2，()表示URL的这个部分是可选的。
                                       3，*匹配任意字符，直到模式里面的下一个字符为止。匹配方式是非贪婪模式。
                                       4，** 匹配任意字符，直到下一个/、?、#为止。匹配方式是贪婪模式。
                 4,exact ：是完全匹配 的意思，这样跳转到到其他页面的时候就不会显示此时路由下的内容
                 5,strict: bool：对路径末尾斜杠的匹配。如果为 true。path 为 '/one/' 将不能匹配 '/one' 但可以匹配 '/one/two'。如果要确保路由没有末尾斜杠，那么 strict 和exact 都必须同时为 true

Link组件：Link组件用于取代<a>元素，生成一个链接，允许用户点击后跳转到另一个路由。它基本上就是<a>元素的React 版本，可以接收Router的状态。
Link组件的属性：1，to: string：作用：跳转到指定路径，使用场景：如果只是单纯的跳转就直接用字符串形式的路径。to: object：作用：携带参数跳转到指定路径，作用场景：比如你点击的这个链接将要跳转的页面需要展示此链接对应的                    内容，又比如这是个支付跳转，需要把商品的价格等信息传递过去。
                2，<NavLink>组件是Link组件的特殊版，用于页面导航准备的。因为导航需要有 “激活状态”。所以有相对的激活属性：activeClassName,activeStyle,exact,strict,isActive。

switch组件：该组件用来渲染匹配地址的第一个<Route>或者<Redirect>。

<Redirect>组件用于路由的跳转，即用户访问一个路由，会自动跳转到另一个路由。＜Redirect from="messages/:id" to="/messages/:id" />



<IndexRedirect/>组件用于访问根路由的时候，将用户重定向到某个子组件。  ＜IndexRedirect to="/welcome" />

<IndexLink />跳转到根路由；不要使用Link组件，而要使用IndexLink组件。这是因为对于根路由来说，activeStyle和activeClassName会失效，或者说总是生效，因为/会匹配任何子路由。如果不用此组件而设置根路由给link组件 添加属性onlyActiveOnIndex={true}也是可以的。



          

         