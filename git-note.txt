简介：git是分布式的版本库控制系统；相对于集中式的版本库控制系统如:svn，它的最大好处是不需要互联网也可以完成对版本库的控制;本地就可以创建版本库控制系统；

创建版本库控制：git init ;
添加要控制的文件：git add 文件名； 
git add -A  提交所有变化；
git add -u  提交被修改(modified)和被删除(deleted)文件，不包括新文件(new)
git add .  提交新文件(new)和被修改(modified)文件，不包括被删除(deleted)文件

提交文件给版本库控制：git commit 文件名；(一般带-m参数；然后进行描述；表示对提交的备注)

查看修改状态：git status;

工作区与暂存区：工作区就是你要git版本控制的文件；工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
git add把文件添加进去，实际上就是把文件修改添加到暂存区；
git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。


查看最近到最远的的提交日志：git log;
回退版本：git reset --hard HEAD^（一个^表示回退前一个版本）;或者git reset --hard 版本ID;

从旧版本回退到的新的版本：git reflog 命令用来记录每一次的命令;命令：git reflog;
                          回退：git reset --hard 版本ID；

撤销修改：
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退，不过前提是没有推送到远程库。

删除文件：git rm <filename>
          git commit -m 

分支：git checkout -b dev;其实是做了两个命令：git branch dev （创建dev分支）;git checkout dev（切换到dev分支）; 
      git branch 列举所有分支。
合并分支，首先需要切换到master分支：命令：git checkout master;合并指定分支到当前分支,命令：git merge dev 
删除分支：git branch -d dev

github为git提供了很好的远程托管仓库。关联一个远程仓库使用命令：git remote add origin github的仓库地址；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；


注意在github上创建一个特殊的仓库名字 [username].github.io能够将仓库做为一个特殊的服务器来使用。


关于远程操作的一些指令：

(1):git clone [远程仓库地址] [本地目录名];该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。git clone远程主机名自动会被Git命名为origin;如果想在clone时就更改主机名可以可以在 git clone 加-o 参数，重新命名主机名。

(2):git remote 列举所有远程主机名; -v 参数可以查看主机名以及远程地址。
    git remote show [主机名]能显示详细的主机详细信息;
    git remote add [主机名] [主机地址] 添加远程主机；
    git remote rm [主机名] 用于删除远程主机。
    git remote rename [原主机名] [新主机名] 命令用于远程主机的改名

(3):git fetch [远程主机名] [分支名]：用户下载或者叫更新远程仓库版本库到本机；一旦远程主机的版本库有了更新需要将这些更新取回本地，这时就要用到git fetch命令。git fetch命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。如果只想获取指定的分支更新就在远程主机名再加上分支名。
    git branch -r 可以查看远程分支。-a选项查看所有分支（包括本地分支）。在本地要使用远程主机上的分支要用"远程主机名/分支名"的形式读取。
    git branch checkout -b [创建分支名] origin/master  在origin/master的基础上，创建一个新分支。此外，也可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支。
    git merge origin/master或git merge origin/master 在本地分支上合并远程分支。

(4):git pull  [远程主机名] [远程分支名]:[本地分支名] 作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。如果本机本地分支与远程分支合并则可以省略本地分支名。
在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动"追踪"origin/master分支。 git branch --set-upstream master origin/next  指令表示aster分支追踪origin/next分支。
如果远程主机删除了某个分支，默认情况下，git pull 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致git pull不知不觉删除了本地分支。但是，你可以改变这个行为，加上参数 -p 就会在本地删除远程已经删除的分支。git pull -p

(5):git push [主机名] [本地分支名:远程分支名] 命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。
如果省略远程分支名，则表示将本地分支推送与之存在"追踪关系"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。git push origin master
如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。git push origin :master等同于git push origin --delete master
如果当前分支只有一个追踪分支，那么主机名都可以省略。 git push

不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用--all选项。git push --all origin



