vue-router是vue应用的官方路由插件，用户单页面导航；
安装npm install vue-router --save;
vue.use(vueRouter);
常规使用:let router= new vueRouter ({routers:[{name:"routerName",path:"/user:id",component:conponent,children:[]}]})
router注入整个vueApp应用：new vue({router});

动态路由匹配：有时候需要将某种模式匹配到的所有路由全部映射到同个组件。一个“路径参数”使用冒号 : 标记，当匹配到一个路由时，参数值会被设置到 this.$route.params，可以在每个组件内使用。

路由嵌套:在构造函数内以children属性声明嵌套；注意：以 / 开头的嵌套路径会被当作根路径。 这让你充分的使用嵌套组件而无须设置嵌套的路径。

编程路由：router.push();为字符串时直接是路由的路径。一般为对象：{path,query:}or{name,params}。注意：如果提供了 path，params 会被忽略；router.replace():跟 router.push 很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 ―― 替换掉当前的 history记录。router.go(n)：这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 window.history.go(n)。

路由命名：通过一个名称来标识一个路由显得更方便一些，特别是在链接一个路由，或者是执行一些跳转的时候。你可以在创建 Router 实例的时候，在 routes 配置中给某个路由设置名称。可以在创建 Router 实例的时候，在 routes 配置中给某个路由设置名称。

命名视图：可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 router-view 没有设置名字，那么默认为 default。
<router-view class="view one"></router-view>
<router-view class="view two" name="a"></router-view>
<router-view class="view three" name="b"></router-view>

const router = new VueRouter({
  routes: [
    {
      path: '/',
      components: {
        default: Foo,
        a: Bar,
        b: Baz
      }
    }
  ]
})


导航守卫：
（1）：正如其名，vue-router 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。有多种机会植入路由导航过程中：全局的, 单个路由独享的, 或者组件级的。

（2）：全局前置守卫:router.beforeEach(function(to,from,next){});to: Route: 即将要进入的目标 路由对象。from: Route: 当前导航正要离开的路由。next: Function: 一定要调用该方法来 resolve 这个钩子。执行效果依赖 next 方法的调用参数。全局后置勾子：钩子不会接受 next 函数也不会改变导航本身：router.afterEach(function(to,from){});

（3）：路由独享的守卫：beforeEnter:(to,from,next)=>{}与全局前置守卫的方法参数是一样的。
（4）：组件独享的守卫：beforeRouteEnter（to,from,next）：在渲染该组件的对应路由被 confirm 前调用， 不！能！获取组件实例 `this`，因为当守卫执行前，组件实例还没被创建。不过，你可以通过传一个回调                                                         给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。next(vm=>{})
                       beforeRouteUpdate（to,from,next）：在当前路由改变，但是该组件被复用时调用，举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，由于会渲染同                                                          样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。可以访问组件实例 `this`
                       beforeRouteLeave（to,from,next）：导航离开该组件的对应路由时调用，可以访问组件实例 `this`。