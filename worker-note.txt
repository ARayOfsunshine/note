1:Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。
2：注意点：1),同源限制,分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。
           2),DOM 限制,Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用document、window、parent这些对象。但是，Worker 线程可以navigator对象和location对象。
           3),通信联系Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。
           4),脚本限制Worker 线程不能执行alert()方法和confirm()方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。
           5),文件限制Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。
3:使用worker：var worker=new Worker();Worker是个构造函数，主线程worker构造函数里面可以传入两个参数。第一个参数是必须的，即worker线程需要处理的文件。第二个参数是可选的配置对象，可以指定 type、credentials、name 三个属性。
4:主线程调用worker.postMessage()方法，向 Worker 发消息。它可以是各种数据类型，包括二进制数据。worker.onmessage指定监听函数，接收子线程发回来的消息。Worker 完成任务以后，主线程就可以把它关掉。worker.terminate();方法
5:Worker 线程内部有一个监听函数，监听message事件。在worker线程中，全局对象为:self;或用this指向。用onmessage监听主线程发送过来的消息。postMessage()发送消息给主线程。close()用于在 Worker 内部关闭自身。Worker 内部如果要加载其他脚本，有一个专门的方法importScripts()。

